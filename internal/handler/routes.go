// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "crypto-exchange/internal/handler/admin"
	asset "crypto-exchange/internal/handler/asset"
	auth "crypto-exchange/internal/handler/auth"
	market "crypto-exchange/internal/handler/market"
	trading "crypto-exchange/internal/handler/trading"
	user "crypto-exchange/internal/handler/user"
	"crypto-exchange/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/profile",
				Handler: user.ProfileHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/orders",
				Handler: trading.CreateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/orders",
				Handler: trading.CancelOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orders",
				Handler: trading.QueryOrdersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/orders/:id",
				Handler: trading.GetOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/trading"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/balances",
				Handler: asset.GetBalancesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/deposit",
				Handler: asset.DepositHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw",
				Handler: asset.WithdrawHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/history",
				Handler: asset.GetAssetHistoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/asset"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/trading-pairs",
				Handler: market.GetTradingPairsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trading-pairs/:symbol",
				Handler: market.GetTradingPairHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/depth",
				Handler: market.GetOrderBookHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/klines",
				Handler: market.GetKlinesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trades",
				Handler: market.GetTradeHistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/ticker/:symbol",
				Handler: market.GetTickerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tickers",
				Handler: market.GetAllTickersHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/market"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/trading-pairs",
				Handler: admin.CreateTradingPairHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/trading-pairs/:symbol",
				Handler: admin.UpdateTradingPairHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trading-pairs/stats",
				Handler: admin.GetTradingPairStatsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trading-pairs",
				Handler: admin.GetAllTradingPairsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin"),
	)
}
